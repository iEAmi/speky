buildscript {
  ext {
    kotlinVersion = "1.5.20"
    detektVersion = "1.17.1"
    kotestVersion = "4.6.0"
    jacocoVersion = "0.8.7"
  }
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${detektVersion}"
  }
}

allprojects {
  apply plugin: "kotlin"
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: "io.gitlab.arturbosch.detekt"

  group = "com.github.speky"
  version = "0.5.0"

  jacoco {
    toolVersion = jacocoVersion
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects { project ->
  dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${detektVersion}"

    testImplementation "io.kotest:kotest-runner-junit5:${kotestVersion}"
    testImplementation "io.kotest:kotest-assertions-core:${kotestVersion}"
    testImplementation "io.kotest:kotest-property:${kotestVersion}"
  }

  test {
    useJUnitPlatform()
  }

  compileKotlin {
    kotlinOptions.languageVersion = "1.5"
    kotlinOptions.apiVersion = "1.5"
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.allWarningsAsErrors = true
  }

  compileTestKotlin {
    kotlinOptions.languageVersion = "1.5"
    kotlinOptions.apiVersion = "1.5"
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.allWarningsAsErrors = false
  }

  detekt {
    toolVersion = detektVersion
    input = files("src/main/kotlin")
    config = files("${project.rootDir}/detekt.yml")
  }
}

task jacocoAggregateReport(type: JacocoReport,) {
  dependsOn(subprojects.test)

  additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(subprojects.sourceSets.main.output)
  executionData.from = files(subprojects.jacocoTestReport.executionData)

  reports {
    html.required = true
    xml.required = true
    csv.required = false
  }
}

task jacocoAggregateCoverageVerification(type: JacocoCoverageVerification) {
  dependsOn(tasks.jacocoAggregateReport)

  additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(subprojects.sourceSets.main.output)
  executionData.from = files(subprojects.jacocoTestReport.executionData)

  violationRules {
    rule {
      limit {
        minimum = 0.90
      }
    }
  }
}

task buildCoverage {
  dependsOn(subprojects.build)

  finalizedBy(tasks.jacocoAggregateReport)
}

configure([jacocoAggregateReport, jacocoAggregateCoverageVerification]) {
  group = 'jacoco'
}

configure(buildCoverage) {
  group = 'build'
}
